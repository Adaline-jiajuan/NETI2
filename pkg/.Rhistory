ESigmaz=matrix(list(), K,1)
Ey=matrix(list(), K,1)
Ez=matrix(list(), K,1)
Uy=matrix(list(), K,1)
Sigmay=matrix(list(), K,1)
thetay=matrix(list(), K,1)
Uz_temp=matrix(list(), K,1)
LL.temp=c()
for (i in 1: K){
Uy[[i]]=paraMY_mu[,i]
Sigmay[[i]]=diag(paraMY_sig[,i])  }
Uz=paraMZ_mu
Sigmaz=diag(paraMZ_sig[,1])
for (i in 1:200)
{
for (ij in 1: K){
ESigmay_temp<-Estep.noloop(Uy[[ij]],Uz,Sigmay[[ij]],Sigmaz,1,data.x[[ij]],Epurity[[ij]])
ESigmay[[ij]]=ESigmay_temp$ESigmay
ESigmaz[[ij]]=ESigmay_temp$Esigmaz
Ey[[ij]]=ESigmay_temp$Ey
Ez[[ij]]=ESigmay_temp$Ez
}
for (ik in 1:K){
Uy[[ik]] = apply(Ey[[ik]],2,mean)
temp=matrix(Uy[[ik]], nrow=n[ik] , ncol=p, byrow=T)
Sy=t(Ey[[ik]]-temp)%*%(Ey[[ik]]-temp)/n[ik] + ESigmay[[ik]]
Sy_p=matrix(nearPD(Sy)$mat@x,p,p)
lambdaym=matrix(lambday[ik],p,p)
diag(lambdaym)=0
re_y<-QUIC(Sy_p, lambdaym/n[ik],msg = 0)
Sigmay[[ik]]=re_y$W
thetay[[ik]]=re_y$X
}
Uz_temp[[ik]] = apply(Ez[[ik]],2,sum)
Uz=do.call("rbind", Uz_temp)
Uz=apply(Uz,2,sum)/sumn
Sz=0
for (k in 1:K){
temp=matrix(Uz, nrow=n[k] , ncol=p, byrow=T)
Sz=Sz+t(Ez[[k]]-temp)%*%(Ez[[k]]-temp) +ESigmaz[[k]]*n[k]
}
Sz_p=matrix(nearPD(Sz/sumn)$mat@x,p,p)
lambdazm=matrix(lambdaz,p,p)
diag(lambdazm)=0
re_z<-QUIC(Sz_p,lambdazm/sumn,msg = 0)
Sigmaz=re_z$W
thetaz=re_z$X;
sumlog= cal_logL(Uy,Uz,Sigmay,Sigmaz,data.x,Epurity)
LL.temp<-c(LL.temp,sumlog)
if(i>1 && abs(LL.temp[i-1]-LL.temp[i])<convergecutoff*abs(LL.temp[i-1]))
{ break()}
i<-i+1
}
result = list(thetay = thetay, thetaz = thetaz, LL.temp = LL.temp)
}
##
Estep.noloop<-function(Uy,Uz,Sigmay,Sigmaz,c.scale,X,AA)
{
P<-as.vector(c.scale*AA)  ### percentage estimate
P.m=diag(P)
p=ncol(X)
n=nrow(X)
Ey<-matrix(NA,n, p)
Ez<-Ey
ESigmay<-matrix(0,p,p)
Esigmaz<-ESigmay
temp=eigen(Sigmay, symmetric=TRUE)
M=temp$values
U=t(temp$vectors)
### temp1=t(U)%*%diag(M)%*%U
### max(abs(temp1-Sigmay))
Sy.half=t(U)%*%diag(M^0.5)
Sy.half.inv=diag(1/M^0.5)%*%U
### max(abs(Sy.half%*%t(Sy.half)-Sigmay))
W=Sy.half.inv%*%Sigmaz%*%t(Sy.half.inv)
temp1=eigen(W, symmetric=TRUE)
V=t(temp1$vectors)
D=temp1$values
### temp2=t(V)%*%diag(D)%*%V
### max(abs(temp2-W))
A=Sy.half%*%t(V)
B=V%*%Sy.half.inv ## p by p
BX=B%*%t(X)%*%P.m ##p by n
BUy=(B%*%Uy)%*%matrix(P^2, 1, n) ## p by n
BUz=(B%*%Uz)%*%matrix(P*(1-P),1,n) ## p by n
tempB=BX-BUy-BUz ## p by n
tempP2=matrix(P^2, p,n, byrow=TRUE) ##p by n
tempC=tempP2+matrix(D, p,1)%*%matrix((1-P)^2, 1,n) ## p by n
tempC=1/tempC
tempBC=tempB*tempC ##p by n
tempABC=A%*%tempBC ## p by n
Ey=t(matrix(Uy, p,n)+tempABC) ##  n by p
Cbar= diag(apply(tempP2*tempC, 1, mean)) ##p by p diagonal
ESigmay=Sigmay-A%*%Cbar%*%t(A)
P.2m=diag(1/(1-P))
Ez=P.2m%*%(X-P.m%*%Ey)
tempP4=matrix(P^4/(1-P)^2, p,n, byrow=TRUE) ##p by n
CbarZ= diag(apply(tempP4*tempC, 1, mean)) ##p by p
Esigmaz=mean(P^2/(1-P)^2)*Sigmay-A%*%CbarZ%*%t(A) ## p by p
ESigmay<-(ESigmay+t(ESigmay))/2  ### garantee its symmetry
Esigmaz<-(Esigmaz+t(Esigmaz))/2  ### garantee its symmetry
#end=proc.time()
list(Ey=Ey,Ez=Ez,ESigmay=ESigmay,Esigmaz=Esigmaz)
}
##
cal_logL<-function(Uy,Uz,Sigmay,Sigmaz,X,P){
K=dim(X)[1]
sumlogl=0
for (ik in 1:K){
re_logL<-calculateLL(Uy[[ik]],Uz,Sigmay[[ik]],Sigmaz,X[[ik]],P[[ik]])
sumlogl=sumlogl+re_logL
}
sumlogl=sumlogl
}
#####
calculateLL<-function(Uy,Uz,Sigmay,Sigmaz,X,P)
{
sum(sapply(1:nrow(X),function(i)
{
Ux<-P[i]*Uy+(1-P[i])*Uz
Sigmax<-P[i]^2*Sigmay+(1-P[i])^2*Sigmaz
dmvnorm(X[i,], Ux, Sigmax, log = TRUE)
}))
}
result = NETI2(TCGA.BRCA$BRCAdata,TCGA.BRCA$purity, lambda=1.6, tau=0.4,delta=0.2)
result = NETI2(data.x$X,data.x$purity, lambda=1.6, tau=0.5,delta=0.5)
load_all()
document()
build()
#check()
#install()
devtools::build_manual()
load_all()
document()
build()
#check()
#install()
devtools::build_manual()
load_all()
document()
build()
#check()
#install()
devtools::build_manual()
library("roxygen2")
library('devtools')
load_all()
document()
build()
#check()
#install()
devtools::build_manual()
library("roxygen2")
library('devtools')
load_all()
document()
build()
#check()
#install()
devtools::build_manual()
library("roxygen2")
library('devtools')
load_all()
document()
build()
#check()
#install()
devtools::build_manual()
load("TCGA.BRCA.rda")
load("D:/Rpackage/NETI2_whole/NETI2/data/TCGA.BRCA.rda")
data("TCGA.BRCA")
library("roxygen2")
library('devtools')
load_all()
document()
build()
#check()
#install()
devtools::build_manual()
library("roxygen2")
library('devtools')
load_all()
document()
load_all()
document()
library("roxygen2")
library('devtools')
load_all()
document()
build()
#check()
#install()
devtools::build_manual()
load_all()
data("TCGA.BRCA")
load("TCGA.BRCA.rda")
load("D:/Rpackage/NETI2_whole/NETI2/.RData")
remove(list=ls())
load("D:/Rpackage/NETI2_whole/NETI2/.RData")
remove(list=ls())
load("D:/Rpackage/NETI2_whole/NETI2/data/TCGA.BRCA.rda")
library("roxygen2")
library('devtools')
load_all()
remove(list=ls())
load("TCGA.BRCA.rda")
TCGA.BRCA1=TCGA.BRCA
load("D:/Rpackage/NETI2_whole/NETI2/data/TCGA.BRCA.rda")
load_all()
document()
load_all()
document()
load_all()
document()
load("D:/Rpackage/NETI2_whole/NETI2/data/TCGA.BRCA.rda")
load_all()
load("D:/Rpackage/NETI2_whole/NETI2/data/TCGA.BRCA.rda")
load_all()
library("roxygen2")
library('devtools')
load_all()
document()
build()
load("D:/Rpackage/NETI2_whole/NETI2/data/TCGA.BRCA.rda")
library("roxygen2")
library('devtools')
load_all()
document()
build()
load("D:/Rpackage/NETI2_whole/NETI2/data/TCGA.BRCA.rda")
View(TCGA.BRCA)
load("D:/Rpackage/NETI2_whole/NETI2/data/TCGA.BRCA.rda")
load_all()
load("D:/Rpackage/NETI2_whole/NETI2/data/TCGA.BRCA.rda")
source('~/.active-rstudio-document')
load("D:/Rpackage/NETI2_whole/NETI2/data/TCGA.BRCA.rda")
library("roxygen2")
library('devtools')
load_all()
load("D:/Rpackage/NETI2_whole/NETI2/data/TCGA.BRCA.rda")
document()
build()
#check()
#install()
devtools::build_manual()
load_all()
document()
build()
#check()
#install()
devtools::build_manual()
#check()
#install()
devtools::build_manual()
load_all()
document()
build()
library("roxygen2")
library('devtools')
load_all()
document()
build()
#install()
devtools::build_manual()
check()
library("roxygen2")
library('devtools')
load_all()
document()
build()
devtools::build_manual()
library("roxygen2")
library('devtools')
load_all()
document()
build()
devtools::build_manual()
install()
library("NETI2")
source('C:/Users/adaline_juan/Desktop/NETI2_Package/simulation/evaluation.metric.R')
p = 100
n = 50
K = 4
network.type = "ER"
umin = 0.5
umax = 1
rtimes = 1
lambda_list = exp(seq(log(2), log(0.1),length=10))
tau_list = c(0.3,0.5,0.7)
delta = 0.5
TP.z = matrix(0, length(lambda_list), length(tau_list))
FP.z = matrix(0, length(lambda_list), length(tau_list))
TP.y = matrix(0, length(lambda_list), length(tau_list))
FP.y = matrix(0, length(lambda_list), length(tau_list))
for (r in 1:rtimes){
cat("r=",r)
# generare simulated data
dat = generate.data(p, n, K, network.type, umin, umax )
for (i_lam in 1:length(lambda_list)){
cat("i_lam=",i_lam)
for (i_tau in 1:length(tau_list)){
# run NETI2
result = NETI2(dat$X,dat$purity,lambda_list[i_lam],tau_list[i_tau],delta)
# compute TF Edges and FP Edges of non-cancerous network
per.z = evaluation.metric(dat$theta.z, result$theta.z)
TP.z[i_lam, i_tau] = TP.z[i_lam, i_tau] + per.z$TP
FP.z[i_lam, i_tau] = FP.z[i_lam, i_tau] + per.z$FP
# compute TF Edges and FP Edges of cancerous networks
TP_tumor=0; TN_tumor=0; FP_tumor=0; FN_tumor=0;
for (i_k in 1 : K){
per.y = evaluation.metric(dat$theta.y[[i_k]], result$theta.y[[i_k]])
TP_tumor = TP_tumor + per.y$TP
FP_tumor = FP_tumor + per.y$FP
}
TP.y[i_lam, i_tau] = TP.y[i_lam, i_tau] + TP_tumor
FP.y[i_lam, i_tau] = FP.y[i_lam, i_tau] + FP_tumor
}
# compute the average of precision and recall
TP.z = TP.z/rtimes
FP.z = FP.z/rtimes
TP.y = TP.y/rtimes
FP.y = FP.y/rtimes
# plot the number of true positive edges against the number of false positive edges
# The Performance of Non-cancerous network
type_list = c("o","o","o")
pch_list = c(0,1, 2)
plot(FP.z[,1], TP.z[,1], col="blue", type = type_list[1],
pch=pch_list[1], lwd=2, xlim = c(0,600),  ylim = c(0,120),  xlab = "FP Edges", ylab = "TP Edges")
title(main = "Performance of NETI2 on ER network of non-cancerous network")
for (i in 1:3){
points(FP.z[,i], TP.z[,i],
col="blue",type = type_list[i], pch=pch_list[i], lwd=2)
}
method = c(expression(paste("NETI2 ", tau == 0.3)), expression(paste("NETI2 ", tau == 0.5)),
expression(paste("NETI2 ", tau == 0.7)) )
pch=  c(0,1, 2)
col =  rep("blue",3)
legend(350,40, legend=  method, ncol=1, col = col, pch=pch, lwd=2,bty = "n")
###############
# The Performance of  cancerous networks
type_list = c("o","o","o")
pch_list = c(0,1, 2)
plot(FP.y[,1], TP.y[,1], col="blue", type = type_list[1],
pch=pch_list[1], lwd=2, xlim = c(0,2000),  ylim = c(0,400),  xlab = "FP Edges", ylab = "TP Edges")
title(main = "Performance of NETI2 on ER network  of cancerous network")
for (i in 1:3){
points(FP.y[,i], TP.y[,i],
col="blue",type = type_list[i], pch=pch_list[i], lwd=2)
}
method = c(expression(paste("NETI2 ", tau == 0.3)), expression(paste("NETI2 ", tau == 0.5)),
expression(paste("NETI2 ", tau == 0.7)) )
pch=  c(0,1, 2)
col =  rep("blue",3)
legend(1200,130, legend=  method, ncol=1, col = col, pch=pch, lwd=2,bty = "n")
type_list = c("o","o","o")
pch_list = c(0,1, 2)
plot(FP.y[,1], TP.y[,1], col="blue", type = type_list[1],
pch=pch_list[1], lwd=2, xlim = c(0,2000),  ylim = c(0,400),  xlab = "FP Edges", ylab = "TP Edges")
title(main = "Performance of NETI2 on ER network  of cancerous network")
for (i in 1:3){
points(FP.y[,i], TP.y[,i],
col="blue",type = type_list[i], pch=pch_list[i], lwd=2)
}
method = c(expression(paste("NETI2 ", tau == 0.3)), expression(paste("NETI2 ", tau == 0.5)),
expression(paste("NETI2 ", tau == 0.7)) )
pch=  c(0,1, 2)
col =  rep("blue",3)
legend(1200,150, legend=  method, ncol=1, col = col, pch=pch, lwd=2,bty = "n")
type_list = c("o","o","o")
pch_list = c(0,1, 2)
plot(FP.z[,1], TP.z[,1], col="blue", type = type_list[1],
pch=pch_list[1], lwd=2, xlim = c(0,600),  ylim = c(0,120),  xlab = "FP Edges", ylab = "TP Edges")
title(main = "Performance of NETI2 on ER network of non-cancerous network")
for (i in 1:3){
points(FP.z[,i], TP.z[,i],
col="blue",type = type_list[i], pch=pch_list[i], lwd=2)
}
method = c(expression(paste("NETI2 ", tau == 0.3)), expression(paste("NETI2 ", tau == 0.5)),
expression(paste("NETI2 ", tau == 0.7)) )
pch=  c(0,1, 2)
col =  rep("blue",3)
legend(350,40, legend=  method, ncol=1, col = col, pch=pch, lwd=2,bty = "n")
type_list = c("o","o","o")
pch_list = c(0,1, 2)
plot(FP.z[,1], TP.z[,1], col="blue", type = type_list[1],
pch=pch_list[1], lwd=2, xlim = c(0,500),  ylim = c(0,120),  xlab = "FP Edges", ylab = "TP Edges")
title(main = "Performance of NETI2 on ER network of non-cancerous network")
for (i in 1:3){
points(FP.z[,i], TP.z[,i],
col="blue",type = type_list[i], pch=pch_list[i], lwd=2)
}
method = c(expression(paste("NETI2 ", tau == 0.3)), expression(paste("NETI2 ", tau == 0.5)),
expression(paste("NETI2 ", tau == 0.7)) )
pch=  c(0,1, 2)
col =  rep("blue",3)
legend(350,40, legend=  method, ncol=1, col = col, pch=pch, lwd=2,bty = "n")
type_list = c("o","o","o")
pch_list = c(0,1, 2)
plot(FP.z[,1], TP.z[,1], col="blue", type = type_list[1],
pch=pch_list[1], lwd=2, xlim = c(0,500),  ylim = c(0,100),  xlab = "FP Edges", ylab = "TP Edges")
title(main = "Performance of NETI2 on ER network of non-cancerous network")
for (i in 1:3){
points(FP.z[,i], TP.z[,i],
col="blue",type = type_list[i], pch=pch_list[i], lwd=2)
}
method = c(expression(paste("NETI2 ", tau == 0.3)), expression(paste("NETI2 ", tau == 0.5)),
expression(paste("NETI2 ", tau == 0.7)) )
pch=  c(0,1, 2)
col =  rep("blue",3)
legend(350,40, legend=  method, ncol=1, col = col, pch=pch, lwd=2,bty = "n")
type_list = c("o","o","o")
pch_list = c(0,1, 2)
plot(FP.z[,1], TP.z[,1], col="blue", type = type_list[1],
pch=pch_list[1], lwd=2, xlim = c(0,600),  ylim = c(0,80),  xlab = "FP Edges", ylab = "TP Edges")
title(main = "Performance of NETI2 on ER network of non-cancerous network")
for (i in 1:3){
points(FP.z[,i], TP.z[,i],
col="blue",type = type_list[i], pch=pch_list[i], lwd=2)
}
method = c(expression(paste("NETI2 ", tau == 0.3)), expression(paste("NETI2 ", tau == 0.5)),
expression(paste("NETI2 ", tau == 0.7)) )
pch=  c(0,1, 2)
col =  rep("blue",3)
legend(350,40, legend=  method, ncol=1, col = col, pch=pch, lwd=2,bty = "n")
type_list = c("o","o","o")
pch_list = c(0,1, 2)
plot(FP.z[,1], TP.z[,1], col="blue", type = type_list[1],
pch=pch_list[1], lwd=2, xlim = c(0,600),  ylim = c(0,80),  xlab = "FP Edges", ylab = "TP Edges")
title(main = "Performance of NETI2 on ER network of non-cancerous network")
for (i in 1:3){
points(FP.z[,i], TP.z[,i],
col="blue",type = type_list[i], pch=pch_list[i], lwd=2)
}
method = c(expression(paste("NETI2 ", tau == 0.3)), expression(paste("NETI2 ", tau == 0.5)),
expression(paste("NETI2 ", tau == 0.7)) )
pch=  c(0,1, 2)
col =  rep("blue",3)
legend(450,40, legend=  method, ncol=1, col = col, pch=pch, lwd=2,bty = "n")
type_list = c("o","o","o")
pch_list = c(0,1, 2)
plot(FP.z[,1], TP.z[,1], col="blue", type = type_list[1],
pch=pch_list[1], lwd=2, xlim = c(0,600),  ylim = c(0,80),  xlab = "FP Edges", ylab = "TP Edges")
title(main = "Performance of NETI2 on ER network of non-cancerous network")
for (i in 1:3){
points(FP.z[,i], TP.z[,i],
col="blue",type = type_list[i], pch=pch_list[i], lwd=2)
}
method = c(expression(paste("NETI2 ", tau == 0.3)), expression(paste("NETI2 ", tau == 0.5)),
expression(paste("NETI2 ", tau == 0.7)) )
pch=  c(0,1, 2)
col =  rep("blue",3)
legend(400,40, legend=  method, ncol=1, col = col, pch=pch, lwd=2,bty = "n")
# run NETI2 using NETI2
TCGA.BRCA.NETI2 = NETI2(TCGA.BRCA$BRCA.data,TCGA.BRCA$BRCA.purity, lambda = 1.6, tau = 0.4,delta = 0.2)
library("NETI2", lib.loc="~/R/win-library/3.4")
remove.packages("NETI2", lib="~/R/win-library/3.4")
library("roxygen2")
library('devtools')
load_all()
library("roxygen2")
library('devtools')
load_all()
load("D:/Rpackage/NETI2_whole/NETI2/data/TCGA.BRCA.rda")
library("roxygen2")
library('devtools')
load_all()
document()
build()
check()
library("roxygen2")
library('devtools')
load_all()
document()
build()
check()
source('D:/Rpackage/NETI2_whole/NETI2/R/NETI2.R')
library("roxygen2")
library('devtools')
load_all()
document()
build()
check()
devtools::build_manual()
library("roxygen2")
library('devtools')
load_all()
document()
build()
devtools::build_manual()
library("roxygen2")
library('devtools')
load_all()
library("roxygen2")
library('devtools')
load_all()
document()
build()
install()
build()
devtools::build_manual()
check()
library("roxygen2")
library('devtools')
load_all()
document()
build()
devtools::build_manual()
check()
load_all()
document()
build()
devtools::build_manual()
